***(
  handling lemmas conjectured
)
in ipsg_common.maude

***(
  when a proof score fragment reduces to false and
  we can not use any existing invariant as lemma,
  we will conjecture a new lemma to discharge the sub-case
)
fmod ISPG-LEMMA-CONJECTURE is
  pr IPSG-PROOF-SCORE-LIST .
  pr IPSG-INPUT-SPEC .
  pr PARAM-PERMUTATION-SET .
  pr TERM-PERMUTATION-SET .
  pr TO-QID-LIST .
  pr TERM-UTILS .
  pr IPSG-LEMMA-GENERATED .
  pr MAP{ViewConst, ViewVariable} *
    (sort Map{ViewConst, ViewVariable} to MapConstVar, 
      sort Entry{ViewConst, ViewVariable} to EntryConstVar,
      op _|->_ to myMap) .
  pr LIST{ViewTupleConst} *
    (sort Tuple{Constant, Constant} to TupleConst,
    sort List{ViewTupleConst} to TupleConstList,
    op myTuple to constPair) .

  vars QIL QIL1 QIL2 : QidList .
  vars QI QI1 QI2 QI3 QI4 : Qid .
  vars INSP2 INSP1 : IPSGInputSpec .
  vars PRL1 PRL2 PRL3 PRL4 : ParamList .
  vars PA1 PA2 : Param .
  vars PRSC1 PRSC2 : IPSGProofScore .
  vars PRSCL1 PRSCL2 : PrscList .
  vars MS1 MS2 : IPSGModuleSpec .
  vars INV1 INV2 : Invariant .
  vars INVL : InvList .
  var N : Nat .
  var PP : ParamPernSet .
  var TP : TermPernSet .
  var MOD : Module .
  vars EQS EQS2 : EquationSet .
  vars EQ1 EQ2 : Equation .
  vars ATTS : AttrSet .
  vars TE1 TE2 TE3 : Term .
  vars TEL TEL2 : TermList .
  
  vars C1 C2 C3 C4 : Constant .
  vars OPS1 OPS2 : OpDeclSet .
  vars OP1 OP2 : OpDecl .
  vars ATTS1 : AttrSet .
  vars MAP1 MAP2 : MapNatEquation .
  vars TCL : TupleConstList .
  --- vars CL : ConstList .
  vars CL : TermList .
  vars MCV1 MCV2 : MapConstVar .
  vars V1 V2 : Variable .
  var LM : LemmaGenerated .

--- the simplest method to conjecture lemma
  op conject : IPSGProofScore IPSGModuleSpec IPSGInputSpec -> IPSGModuleSpec .
  
  op isFreshConst : Constant OpDeclSet -> Bool .
  eq isFreshConst(C1,none) = false .
  eq isFreshConst(C1, op QI1 : nil -> QI2 [ATTS1] . OPS1) 
    = if getName(C1) == QI1 and getType(C1) == QI2 then
        true 
      else
        isFreshConst(C1, OPS1)
      fi .
  eq isFreshConst(C1, OP1 OPS1) = isFreshConst(C1, OPS1) [owise] .


  op getEqConstPairs : IPSGProofScore -> TupleConstList .

--- actually, the 3rd param is a list of constants
  op doGetEqConstPairs : MapNatEquation Equation TermList Nat TupleConstList -> TupleConstList .

--- note that, map's keys start from 1, not 0
  ceq getEqConstPairs(PRSC1) = 
    doGetEqConstPairs(MAP1, MAP1[1], getFreshConstList(PRSC1), 1, (nil).TupleConstList)
  if MAP1 := getPrscMapEqs(PRSC1) .

  eq doGetEqConstPairs(MAP1, undefined, CL, N, TCL) = TCL .
  eq doGetEqConstPairs(MAP1, (eq C1 = C2 [none] .), CL, N, TCL) 
    = if myOccurs(C1, CL) and myOccurs(C2, CL) then
        doGetEqConstPairs(MAP1, MAP1[s(N)], CL, s(N), (TCL constPair(C1,C2)))
      else
        doGetEqConstPairs(MAP1, MAP1[s(N)], CL, s(N), TCL)
      fi .
  eq doGetEqConstPairs(MAP1, EQ1, CL, N, TCL) 
    = doGetEqConstPairs(MAP1, MAP1[s(N)], CL, s(N), TCL) [owise] .

***(
  again, TermList in 3 ops below actually is a list of constant
)
--- generate a map from fresh constant to (new) variable
  op generateMapConstVar : TermList TupleConstList -> MapConstVar .

--- if we have 3 params p,q,r, but we have p = r, then the lemma only need 2 params
  op reduceLmParams : TermList TupleConstList -> TermList .

--- generate: op lm1 : Sys Pid Pid -> Bool
  op generateLmOpDel : Qid MapConstVar -> OpDecl .

--- generate: eq lm1(S:Sys, P:Pid, Q:Pid) = ...
  op generateLmEquation : Qid EquationSet MapConstVar TupleConstList -> Equation .

  eq generateMapConstVar((empty).TermList, TCL) = (empty).MapConstVar .
  eq generateMapConstVar((TE1 , CL), TCL) = 
    (myMap(TE1, genLmVar(TE1, TCL)) , generateMapConstVar(CL, TCL)) .

  op genLmVar : Constant TupleConstList -> Variable .
  eq genLmVar(C1, (nil).TupleConstList) = 
    qid(genLmVarName(C1) + ":" + string(getType(C1))) .
  eq genLmVar(C1, (constPair(C2,C3) TCL)) 
    = if constEq(C1,C2) then
        qid(genLmVarName(C3) + ":" + string(getType(C3)))
      else
        genLmVar(C1, TCL) 
      fi .

  op genLmVarName : Constant -> String .
  eq genLmVarName(C1) = toUpperCase(string(getName(C1))).

  op constEq : Constant Constant -> Bool .
  eq constEq(C1, C2) = 
    getType(C1) == getType(C2) and getName(C1) == getName(C2) .

  op myOccurs : Constant TermList -> Bool .
  eq myOccurs(C1, (empty).TermList) = false .
  eq myOccurs(C1, (C2 , CL)) 
    = if constEq(C1,C2) then
        true
      else
        myOccurs(C1, CL)
      fi .

  op myOccurs2 : Constant Constant TupleConstList -> Bool .
  eq myOccurs2(C1, C2, (nil).TupleConstList) = false .
  eq myOccurs2(C1, C2, (constPair(C3, C4) TCL)) 
    = if constEq(C1,C3) and constEq(C2,C4) then
        true
      else
        myOccurs2(C1, C2, TCL)
      fi .

--- actually, it should return a Constant or null (returns nothing)
  op doReduceLmParams : Constant TupleConstList -> TermList .
  eq doReduceLmParams(C1, (nil).TupleConstList) = C1 .
  eq doReduceLmParams(C1, (constPair(C2,C3) TCL)) 
    = if constEq(C1,C2) then
        (empty).TermList
      else
        doReduceLmParams(C1, TCL) 
      fi .

  eq reduceLmParams((empty).TermList, TCL) = (empty).TermList .
  eq reduceLmParams((C1 , TEL), TCL) 
    = (doReduceLmParams(C1, TCL) , reduceLmParams(TEL, TCL)) .

  eq generateLmOpDel(QI1, MCV1)
    = (op QI1 : doGenLmOpDecl(genLmParams(MCV1,(empty).TermList)) -> 'Bool [none] .) .

  op doGenLmOpDecl : TermList -> TypeList .
  eq doGenLmOpDecl((empty).TermList) = (nil).TypeList .
  eq doGenLmOpDecl((V1, TEL)) = getType(V1) doGenLmOpDecl(TEL) .

  eq generateLmEquation(QI1, EQS, MCV1, TCL) 
    = (eq QI1[genLmParams(MCV1,(empty).TermList)] =
       '_=_['_and_[doGenLmEqs(EQS,MCV1,TCL)], 'false.Bool] [none] .) .

  op doGenLmEqs : EquationSet MapConstVar TupleConstList -> TermList .
  eq doGenLmEqs(none, MCV1, TCL) = (empty).TermList .
  eq doGenLmEqs(EQ1 EQS, MCV1, TCL) 
    = (doGenLmEq(EQ1, MCV1, TCL), doGenLmEqs(EQS, MCV1, TCL)) .

  op doGenLmEq : Equation MapConstVar TupleConstList -> Term .
  ceq doGenLmEq(eq C1 = C2 [none] ., MCV1, TCL) 
    = (empty).TermList if myOccurs2(C1, C2, TCL) .
  eq doGenLmEq(eq TE2 = TE3 [none] ., MCV1, TCL)
    = '_=_[replaceConstByVar(TE2,MCV1),replaceConstByVar(TE3,MCV1)]
  [owise] .

  op replaceConstByVar : Term MapConstVar -> Term .
  op replaceConstByVar1 : TermList MapConstVar -> TermList .
  
  eq replaceConstByVar(C1, MCV1) 
    = if MCV1[C1] == undefined then
        C1
      else
        MCV1[C1]
      fi .
  eq replaceConstByVar(QI1[TEL], MCV1) = QI1[replaceConstByVar1(TEL, MCV1)] .
  eq replaceConstByVar(TE1, MCV1) = TE1 [owise] .

  eq replaceConstByVar1((empty).TermList, MCV1) = (empty).TermList .
  eq replaceConstByVar1((TE1 , TEL), MCV1) 
    = replaceConstByVar(TE1, MCV1) , replaceConstByVar1(TEL, MCV1) .

  op genLmParams : MapConstVar TermList -> TermList .
  eq genLmParams((empty).MapConstVar, TEL) = TEL .
  eq genLmParams((myMap(C1,V1) , MCV1), TEL) 
    = if checkExist2(V1, TEL) then
        genLmParams(MCV1, TEL)
      else
        genLmParams(MCV1, (TEL , V1)) 
      fi .

***( 
  some equations maybe redundant, e.g.,
  (pc(s,p) = l3) = false is redundant if we have pc(s,p) = l4
)
  op reduceEqsSet : EquationSet Module -> EquationSet .
  eq reduceEqsSet((none).EquationSet, MOD) = (none).EquationSet .
  ceq reduceEqsSet(eq TE2 = TE3 [none] . EQS, MOD) =
    if getTerm(metaReduce(tempModRedEq(MOD, EQ1), 
        '_=_[TE2,TE3])) == 'true.Bool then
      reduceEqsSet(EQS, MOD)
    else
      EQ1 reduceEqsSet(EQS, MOD)
    fi 
    if EQ1 := eq TE2 = TE3 [none] . .
endfm

--- fmod IPSG-LM-STRENGTHEN is
---   pr META-TERM .
---   op 
--- endfm